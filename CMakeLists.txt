cmake_minimum_required(VERSION 3.16)
project(nasm_with_qt)

set(CMAKE_CXX_STANDARD 17)

set(CMAKE_AUTOMOC ON) # Enable Qt Meta-Object Compiler (MOC)
set(CMAKE_AUTORCC ON) # Enable Qt Resources Compiler (QRC)
set(CMAKE_AUTOUIC ON) # Enable Qt UI Compiler (UIC)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-Wall -O3")
set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} "-no-pie")

if (UNIX AND NOT APPLE)
    set(CMAKE_PREFIX_PATH "~/Qt/5.15.0/gcc_64/lib/cmake")
elseif (WIN32)
    set(CMAKE_PREFIX_PATH "C:/Qt/5.15.0/mingw81_64/lib/cmake")
endif ()

find_package(Qt5Core REQUIRED)
find_package(Qt5Widgets REQUIRED)

enable_language(ASM_NASM)

set(SOURCES main.cpp mainwindow.cpp customdialog.cpp)

if (UNIX)
    set(ASM_SOURCES assembly_unix.asm)
elseif (WIN32)
    set(ASM_SOURCES assembly_win32.asm)
endif ()

add_executable(nasm_with_qt ${SOURCES} ${ASM_SOURCES})

target_link_libraries(nasm_with_qt Qt5::Core)
target_link_libraries(nasm_with_qt Qt5::Widgets)

# Workaround for the situation with -fPIC flag, which is necessary for Qt,
# and which breaks asm compilation due to nasm flags syntax.
# This script removes -fPIC flag from ASM_NASM_FLAGS in Makefile, which is
# automatically generated by CMake.
if (UNIX AND NOT APPLE)
    add_custom_target(fix_asm_nasm_flags COMMAND ${CMAKE_SOURCE_DIR}/fix_asm_nasm_flags.sh ${CMAKE_PROJECT_NAME} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
    add_dependencies(nasm_with_qt fix_asm_nasm_flags)
endif ()
